"""
Construct annotationed tree for use in nextclade

REQUIRED INPUTS:
    metadata            = ingest/results/metadata_all.fasta
    prepared_sequences  = ingest/results/sequences_all.fasta
"""

from pathlib import Path
configfile: "config/config.yaml"

INDIR = Path("input")
OUTDIR = Path("output")
MIN_LENGTH = 9000
TRAITS = "region country clade_membership"

rule all:
    input:
        OUTDIR / "preprocessing" / "prealigned.fasta",
        OUTDIR / "align" / "aligned.fasta",
        OUTDIR / "tree" / "tree.nwk",
        OUTDIR / "tree" / "tree.refined.nwk",
        OUTDIR / "nodedata" / "nt-muts.json",
        OUTDIR / "nodedata" / "aa-muts.json",
        OUTDIR / "nodedata" / "traits.json",
        OUTDIR / "nc_dataset" / "tree.json",

rule prefilter:
    message: "prefiltering sequences of small length"
    input:
        sequences = INDIR / "sequences_all.fasta",
    output:
        filtered = OUTDIR / "preprocessing" / "prefiltered.fasta" 
    conda: "envs/augur.yaml"
    params:
        min_len = MIN_LENGTH,
        issues = "resources/strains.to.remove.txt"
    threads: 5
    shell:"""
    seqkit seq \
    {input.sequences} \
    --threads {threads} \
    --min-len {params.min_len} \
    --remove-gaps \
    --gap-letters "-N" \
    | seqkit grep \
    --pattern-file {params.issues} \
    --invert-match \
    --out-file {output.filtered}
    """

rule prealign:
    input:
        sequences = rules.prefilter.output.filtered,
        reference = "resources/reference.fasta",
        annotation = "resources/genome_annotation.gff3",
    output:
        alignment = OUTDIR / "preprocessing" /  "prealigned.fasta",
    conda: "envs/augur.yaml"
    threads: 5
    shell:"""
    nextclade3 run \
        --jobs {threads} \
        {input.sequences} \
        --retry-reverse-complement \
        --excess-bandwidth 100 \
        --terminal-bandwidth 300 \
        --allowed-mismatches 8 \
        --window-size 40 \
        --min-seed-cover 0.1 \
        --input-ref {input.reference} \
        --gap-alignment-side left \
        --input-annotation {input.annotation} \
        --output-fasta /dev/stdout \
        --include-reference \
    | sed 's/ |(reverse complement)$//' > {output.alignment}
    """

rule align:
    """
    Aligning sequences to {input.reference}
      - filling gaps with N
    """
    input:
        sequences = rules.prealign.output.alignment,
    output:
        alignment = OUTDIR / "align" / "aligned.fasta"
    params:
        reference_name = "NC_001437.1"
    conda: "envs/augur.yaml"
    threads: 10
    shell:"""
    augur align \
    --sequences {input.sequences} \
    --reference-name {params.reference_name} \
    --output {output.alignment} \
    --fill-gaps \
    --remove-reference \
    --nthreads {threads} > /dev/null 2>&1
    """
    
rule tree:
    """Building tree"""
    input:
        alignment = rules.align.output.alignment
    output:
        tree = OUTDIR / "tree" / "tree.nwk"
    conda: "envs/augur.yaml"
    threads: 5
    shell:"""
    augur tree \
    --alignment {input.alignment} \
    --output {output.tree} \
    --nthreads {threads}
    """

rule refine:
    """
    Refining tree
      - estimate timetree
      - use {params.coalescent} coalescent timescale
      - estimate {params.date_inference} node dates
      - filter tips more than {params.clock_filter_iqd} IQDs from clock expectation
    """
    input:
        alignment = rules.align.output.alignment,
        tree = rules.tree.output.tree,
        metadata = INDIR / "metadata_all.tsv",
    output:
        tree = OUTDIR / "tree" / "tree.refined.nwk",
        node_data = OUTDIR / "nodedata" / "branch-lengths.json",
    log: OUTDIR / "log" / "refine.txt"
    params:
        coalescent = "opt",
        date_inference = "marginal",
        clock_filter_iqd = 4,
        strain_id = config.get("strain_id_field", "strain"),
    conda: "envs/augur.yaml"
    threads: 10
    shell:"""   
    augur refine \
        --tree {input.tree} \
        --alignment {input.alignment} \
        --metadata {input.metadata} \
        --metadata-id-columns {params.strain_id} \
        --output-tree {output.tree} \
        --output-node-data {output.node_data} \
        --timetree \
        --coalescent {params.coalescent} \
        --date-confidence \
        --date-inference {params.date_inference} \
        --clock-filter-iqd {params.clock_filter_iqd} > {log}
    """

rule ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.align.output.alignment,
        reference = "resources/reference.fasta",
    output:
        node_data = OUTDIR / "nodedata" / "nt-muts.json"
    params:
        inference = "joint"
    shell:"""
    augur ancestral \
        --tree {input.tree} \
        --alignment {input.alignment} \
        --output-node-data {output.node_data} \
        --inference {params.inference} \
        --root-sequence {input.reference}
    """

rule translate:
    """
    Translating amino acid sequences
    """
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = "resources/genome_annotation.gff3"
    output:
        node_data = OUTDIR / "nodedata" / "aa-muts.json"
    shell:"""
    augur translate \
        --tree {input.tree} \
        --ancestral-sequences {input.node_data} \
        --reference-sequence {input.reference} \
        --output {output.node_data} \
    """

rule traits:
    """
    Inferring ancestral traits for {params.columns!s}
    """
    input:
        tree = rules.refine.output.tree,
        metadata = INDIR / "metadata_all.tsv",
    output:
        node_data = OUTDIR / "nodedata" / "traits.json",
    params:
        strain_id = config.get("strain_id_field", "strain"),
        traits = TRAITS
    shell:"""
    augur traits \
    --tree {input.tree} \
    --metadata {input.metadata} \
    --metadata-id-columns {params.strain_id} \
    --output {output.node_data} \
    --columns {params.traits} \
    --confidence
    """

rule export:
    """Exporting data files for auspice"""
    input:
        tree = rules.refine.output.tree,
        metadata = INDIR / "metadata_all.tsv",
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output.node_data,
        #clades = "results/clades_{serotype}.json",
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        auspice_config = "resources/auspice.json",
    output:
        auspice_json = OUTDIR / "auspice" / "tree.json",
    params:
        strain_id = config.get("strain_id_field", "strain"),
    shell:"""
    augur export v2 \
        --tree {input.tree} \
        --metadata {input.metadata} \
        --metadata-id-columns {params.strain_id} \
        --node-data {input.branch_lengths} {input.traits} {input.nt_muts} {input.aa_muts} \
        --auspice-config {input.auspice_config} \
        --include-root-sequence \
        --output {output.auspice_json}
    """